plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'com.google.protobuf' version '0.9.4'
	id 'jacoco'
	id 'org.openapi.generator' version '7.7.0'
}

group = 'ubb.graduation24'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = '0.8.8'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

	// protobuf
	implementation 'io.github.lognet:grpc-spring-boot-starter:5.1.5'
	implementation 'com.google.protobuf:protobuf-java:3.25.3'
	implementation 'io.grpc:grpc-netty-shaded:1.62.2'
	implementation 'io.grpc:grpc-protobuf:1.62.2'
	implementation 'io.grpc:grpc-stub:1.62.2'
	implementation 'io.grpc:grpc-core:1.62.2'

	runtimeOnly 'io.grpc:grpc-services:1.62.2'
	implementation 'com.google.protobuf:protobuf-java-util:3.25.3'
	implementation 'io.grpc:grpc-inprocess:1.62.2'
	testImplementation 'io.grpc:grpc-testing:1.62.2'

	// to solve the Generated class dependency in the java file generated from proto
	implementation 'javax.annotation:javax.annotation-api:1.3.2'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
	implementation 'org.glassfish:jakarta.el:4.0.2'

	// Unit tests
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.2'
	testImplementation 'org.mockito:mockito-core:5.12.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

}

// proto -> java stub class
protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.25.3"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:1.62.2"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

// Inform IDE about the generated code.
sourceSets {
	main {
		java {
			srcDirs 'build/generated/source/proto/main/grpc'
			srcDirs 'build/generated/source/proto/main/java'
		}
	}
}

// create a jar for the proto generated classes to include it into the client app
jar {
	manifest {
		attributes(
				'Implementation-Title': 'Person Service gRPC',
				'Implementation-Version': '1.0.0'
		)
	}
	from sourceSets.main.output
}

// test with reports and coverage
test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // Generate the report after tests are run
}

jacocoTestReport {
	dependsOn test // Make sure tests run before generating the report
	reports {
		html.required.set(true) // Generate HTML report
		xml.required.set(true)  // Optionally generate XML report
	}
	sourceDirectories.setFrom(files(['src/main/java']))
	classDirectories.setFrom(
			files([
					fileTree(dir: 'build/classes/java/main').matching {
						include '**/ubb/graduation24/immopal/person_service/service/**'
					}
			])
	)
	executionData.setFrom(fileTree(dir: 'build', includes: ['jacoco/test.exec']))
}

tasks.withType(JavaCompile) {
	options.compilerArgs += ['-Xlint:unchecked']
}